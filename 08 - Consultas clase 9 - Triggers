CREATE TRIGGER nuevo_pedido
AFTER INSERT ON pedido
FOR EACH ROW


UPDATE libros SET stock = stock - new.cantidad WHERE libros.id_libro = new.id_libro;

-- 02. Registrar actualizaci√≥n cambio de nombre

CREATE TABLE log_nombres (
id_log_nombre INT AUTO_INCREMENT PRIMARY KEY,
viejo_nombre VARCHAR(100),
nuevo_nombre VARCHAR(100) ,
fecha DATE);

AFTER UPDATE ON libros
FOR EACH ROW

INSERT INTO log_nombres (viejo_nombre,nuevo_nombre) VALUES (OLD.titulo,NEW.titulo);

UPDATE libros SET titulo = 'War and Peace' WHERE id_libro = 11;

-- 03. Registrar una baja de libro

CREATE TABLE log_baja_libros(
id_log_baja INT AUTO_INCREMENT PRIMARY KEY,
id INT,
titulo VARCHAR (100),
descripcion VARCHAR (100),
fecha_alta DATE,
fecha_baja DATE,
usuario VARCHAR (100)
);

CREATE TRIGGER baja_libro
BEFORE DELETE ON libros
FOR EACH ROW
INSERT INTO log_baja_libros (id,titulo,descripcion,fecha_alta,fecha_baja,Usuario)
VALUES (OLD.id_libro,OLD.titulo,OLD.descripcion,OLD.fecha_alta,current_date(),USER());

DELETE from libros WHERE id_libro = 17;

DELETE from libros WHERE id_libro = 21;
